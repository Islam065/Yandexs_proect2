import pygame
import random
import sys
import math

# --- Определения ---
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
GREEN = (0, 255, 0)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
YELLOW = (255, 255, 0)
ORANGE = (255, 165, 0)
PINK = (255, 182, 193)

SCREEN_WIDTH = 600
SCREEN_HEIGHT = 480
CELL_SIZE = 20
SNAKE_SPEED = 7  # Увеличили SNAKE_SPEED, чтобы сделать змею чуть медленнее
BLOCK_SIZE = 20
FONT_SIZE = 24
TEXT_COLOR = WHITE
FPS = 60
BORDER_RADIUS = 5

# --- Классы ---
class Snake(pygame.sprite.Sprite):
    def __init__(self):
        self.body = [(10, 10), (10, 11), (10, 12)]
        self.direction = (0, -1)
        self.new_block = False
        self.color = GREEN
        self.invincible = False
        self.invincible_timer = 0
        self.move_timer = 0

    def move(self):
        self.move_timer += 1

        if self.move_timer >= SNAKE_SPEED:
            self.move_timer = 0

            if self.new_block:
                new_head = (self.body[0][0] + self.direction[0], self.body[0][1] + self.direction[1])
                self.body.insert(0, new_head)
                self.new_block = False
            else:
                new_head = (self.body[0][0] + self.direction[0], self.body[0][1] + self.direction[1])
                self.body.insert(0, new_head)
                self.body.pop()

            # Телепортация при выходе за границы
            if new_head[0] < 0:
                new_head = (SCREEN_WIDTH // CELL_SIZE - 1, new_head[1])
            elif new_head[0] >= SCREEN_WIDTH // CELL_SIZE:
                new_head = (0, new_head[1])
            elif new_head[1] < 0:
                new_head = (new_head[0], SCREEN_HEIGHT // CELL_SIZE - 1)
            elif new_head[1] >= SCREEN_HEIGHT // CELL_SIZE:
                new_head = (new_head[0], 0)

            self.body[0] = new_head

    def grow(self):
        self.new_block = True

    def check_collision(self):
        head = self.body[0]
        if head in self.body[1:]:
            return True
        return False

    def draw(self, screen):
        for block in self.body:
            rect = pygame.Rect(block[0] * CELL_SIZE, block[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)
            pygame.draw.rect(screen, self.color, rect, border_radius=BORDER_RADIUS)

    def make_invincible(self):
        self.invincible = True
        self.invincible_timer = int(7 * FPS)

    def update(self):
        if self.invincible:
            self.invincible_timer -= 1
            if self.invincible_timer <= 0:
                self.invincible = False

    def get_head_rect(self):
        head = self.body[0]
        return pygame.Rect(head[0] * CELL_SIZE, head[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)


class Food(pygame.sprite.Sprite):
    def __init__(self, snake_body, blocks):
        self.snake_body = snake_body
        self.blocks = blocks
        self.position = self.generate_valid_position()
        self.color = RED
        self.radius = CELL_SIZE // 2  # Радиус обычной еды
        self.is_bonus = False

    def generate_random_position(self):
        x = random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1)
        y = random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1)
        return (x, y)

    def generate_valid_position(self):
        while True:
            position = self.generate_random_position()
            if position not in self.snake_body and not self.is_inside_blocks(position):
                break
        return position

    def is_inside_blocks(self, position):
        for block in self.blocks:
             if position[0] == block.rect.x // CELL_SIZE and position[1] == block.rect.y // CELL_SIZE:
                return True
        return False

    def draw(self, screen):
        rect = pygame.Rect(self.position[0] * CELL_SIZE, self.position[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)
        pygame.draw.circle(screen, self.color, rect.center, self.radius)

    def update(self):
        self.snake_body = snake.body
        self.blocks = blocks
        # self.position = self.generate_valid_position()  # Убрали это!


class DoublePointsFood(pygame.sprite.Sprite):
    def __init__(self, snake_body, blocks):
        self.snake_body = snake_body
        self.blocks = blocks
        self.position = self.generate_valid_position()
        self.color = YELLOW
        self.radius = int(CELL_SIZE * 0.75)  # Радиус бонусной еды больше
        self.active = False  # Бонусная еда изначально неактивна

    def generate_random_position(self):
        x = random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1)
        y = random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1)
        return (x, y)

    def generate_valid_position(self):
        while True:
            position = self.generate_random_position()
            if position not in self.snake_body and not self.is_inside_blocks(position):
                break
        return position

    def is_inside_blocks(self, position):
        for block in self.blocks:
             if position[0] == block.rect.x // CELL_SIZE and position[1] == block.rect.y // CELL_SIZE:
                return True
        return False

    def draw(self, screen):
        if self.active:
            rect = pygame.Rect(self.position[0] * CELL_SIZE, self.position[1] * CELL_SIZE, CELL_SIZE, CELL_SIZE)
            pygame.draw.circle(screen, self.color, rect.center, self.radius)

    def update(self):
        if not self.active:  # Если бонус не активен
            self.position = (-100, -100)  # Убираем с экрана
        self.snake_body = snake.body
        self.blocks = blocks


class Block(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        self.image = pygame.image.load("block.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (BLOCK_SIZE, BLOCK_SIZE))

        self.rect = self.image.get_rect()
        self.rect.x = x * CELL_SIZE
        self.rect.y = y * CELL_SIZE

    def update(self):
        pass


class InvinciblePowerUp(pygame.sprite.Sprite):
    def __init__(self):
        super().__init__()
        self.image = pygame.image.load("invincible.png").convert_alpha()
        self.image = pygame.transform.scale(self.image, (CELL_SIZE, CELL_SIZE))
        self.rect = self.image.get_rect()
        self.rect.x = random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1) * CELL_SIZE
        self.rect.y = random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1) * CELL_SIZE
        self.active = False

    def update(self):
        if not self.active:
            self.rect.x = -100

# --- Инициализация Pygame ---
pygame.init()
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Змейка")
clock = pygame.time.Clock()

# --- Загрузка ресурсов ---
try:
    pygame.mixer.music.load("background_music.mp3")
    pygame.mixer.music.play(-1)
except pygame.error as message:
    print("Не удалось загрузить музыку:", message)

try:
    font = pygame.font.Font("kenvector_future.ttf", FONT_SIZE)
except FileNotFoundError:
    font = pygame.font.Font(None, FONT_SIZE)

# --- Создание объектов игры ---
snake = Snake()
# Создаем блоки до того как создаем еду
all_sprites = pygame.sprite.Group()
blocks = pygame.sprite.Group()
# --- Функция для добавления блоков ---
def add_block():
    block = Block(random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1), random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1))
    all_sprites.add(block)
    blocks.add(block)

# Добавляем стартовые блоки
for i in range(3):
    add_block()

food = Food(snake.body, blocks)
double_points_food = DoublePointsFood(snake.body, blocks)

invincible_powerup = InvinciblePowerUp()


# --- Функция для отображения текста ---
def draw_text(screen, text, font, color, x, y):
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect()
    text_rect.center = (x, y)
    screen.blit(text_surface, text_rect)

# --- Функция для отображения текста по левому краю ---
def draw_text_left(screen, text, font, color, x, y):
    text_surface = font.render(text, True, color)
    text_rect = text_surface.get_rect()
    text_rect.topleft = (x, y)
    screen.blit(text_surface, text_rect)

# --- Переменные игры ---
game_over = False
score = 0
level = 1
powerup_spawn_timer = 0
POWERUP_SPAWN_INTERVAL = 40 * FPS
double_points_timer = 0
DOUBLE_POINTS_INTERVAL = 30 * FPS  # Бонус с удвоением очков каждые 30 секунд
high_score = 0
block_spawn_timer = 0
BLOCK_SPAWN_INTERVAL = 800  # Увеличиваем интервал до 800
LEVEL_UP_SCORE = 100

# --- Загрузка рекорда из файла ---
try:
    with open("highscore.txt", "r") as f:
        high_score = int(f.read())
except FileNotFoundError:
    high_score = 0
except ValueError:
    high_score = 0

# --- Основной цикл игры ---
while not game_over:
    # --- Обработка событий ---
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP and snake.direction != (0, 1):
                snake.direction = (0, -1)
            if event.key == pygame.K_DOWN and snake.direction != (0, -1):
                snake.direction = (0, 1)
            if event.key == pygame.K_LEFT and snake.direction != (1, 0):
                snake.direction = (-1, 0)
            if event.key == pygame.K_RIGHT and snake.direction != (-1, 0):
                snake.direction = (1, 0)
            if event.key == pygame.K_r and game_over:
                snake = Snake()
                #Создаем объекты food и double_points_food после добавления блоков
                all_sprites = pygame.sprite.Group()
                blocks = pygame.sprite.Group()

                 # --- Функция для добавления блоков ---
                def add_block():
                    block = Block(random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1), random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1))
                    all_sprites.add(block)
                    blocks.add(block)

                # Добавляем стартовые блоки
                for i in range(3):
                    add_block()
                food = Food(snake.body, blocks)
                double_points_food = DoublePointsFood(snake.body, blocks)
                game_over = False
                score = 0
                level = 1
                all_sprites.add(invincible_powerup)
                invincible_powerup.active = False
                invincible_powerup.rect.x = random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1) * CELL_SIZE
                invincible_powerup.rect.y = random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1) * CELL_SIZE
                powerup_spawn_timer = 0
                double_points_timer = 0  # Сбрасываем таймер для бонуса
                block_spawn_timer = 0

    # --- Логика игры ---
    if not game_over:
        snake.move()
        snake.update()
        food.update()
        double_points_food.update()

        if snake.body[0][0] * CELL_SIZE == food.position[0] * CELL_SIZE and snake.body[0][1] * CELL_SIZE == food.position[1] * CELL_SIZE:
            score += 10
            snake.grow()
            food = Food(snake.body, blocks)  # Создаем новую еду
            food.is_bonus = False

        if double_points_food.active and snake.body[0][0] * CELL_SIZE == double_points_food.position[0] * CELL_SIZE and snake.body[0][1] * CELL_SIZE == double_points_food.position[1] * CELL_SIZE:
            score += 40  # Удвоенные очки, теперь 40
            snake.grow()
            double_points_food.active = False  # Отключаем бонус
            double_points_food = DoublePointsFood(snake.body, blocks)
            double_points_food.position = (-100, -100)

        if score >= LEVEL_UP_SCORE * level:
            level += 1

        # Проверяем, столкнулась ли змейка с бонусом неуязвимости
        if invincible_powerup.active and snake.body[0][0] * CELL_SIZE == invincible_powerup.rect.x and snake.body[0][1] * CELL_SIZE == invincible_powerup.rect.y:
            snake.make_invincible()
            invincible_powerup.active = False
            all_sprites.remove(invincible_powerup)

        hit = False
        if not snake.invincible:
            snake_head_rect = snake.get_head_rect()
            # Проверяем столкновение прямоугольников (змеи и блоков)
            for block in blocks:
                if snake_head_rect.colliderect(block.rect):
                    hit = True
                    break

        if snake.check_collision() or hit:
            game_over = True
            if score > high_score:
                high_score = score


        # Создание Power Up
        powerup_spawn_timer += 1
        if powerup_spawn_timer >= POWERUP_SPAWN_INTERVAL and not invincible_powerup.active and random.random() < 0.05:
            invincible_powerup.active = True
            all_sprites.add(invincible_powerup)
            invincible_powerup.rect.x = random.randint(0, SCREEN_WIDTH // CELL_SIZE - 1) * CELL_SIZE
            invincible_powerup.rect.y = random.randint(0, SCREEN_HEIGHT // CELL_SIZE - 1) * CELL_SIZE
            powerup_spawn_timer = 0

        invincible_powerup.update()

        # Создание блоков - новые правила
        block_spawn_timer += 1
        block_spawn_interval = BLOCK_SPAWN_INTERVAL - (level * 5)
        if block_spawn_timer >= block_spawn_interval and random.random() < 0.1:
            add_block()
            block_spawn_timer = 0

        # Создание бонуса с удвоением очков
        double_points_timer += 1
        if double_points_timer >= DOUBLE_POINTS_INTERVAL and not double_points_food.active:
            double_points_food = DoublePointsFood(snake.body, blocks)
            double_points_food.active = True
            double_points_food.position = double_points_food.generate_valid_position()
            double_points_timer = 0

    # --- Рендеринг ---
    screen.fill(BLACK)

    snake.draw(screen)
    food.draw(screen)
    double_points_food.draw(screen)  # Бонус рисуем только если active
    all_sprites.draw(screen)
    blocks.update()

    draw_text_left(screen, f"Счет: {score}", font, TEXT_COLOR, 10, 10)
    draw_text_left(screen, f"Уровень: {level}", font, TEXT_COLOR, 10, 30)
    draw_text_left(screen, f"Рекорд: {high_score}", font, TEXT_COLOR, 10, 50)

    if snake.invincible:
        draw_text(screen, "Неуязвим!", font, YELLOW, SCREEN_WIDTH - 70, 30)

    if game_over:
        draw_text(screen, "Game Over!", font, RED, SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 - 20)
        draw_text(screen, "Нажмите 'R' для перезапуска", font, YELLOW, SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 20)

    pygame.display.flip()

    # --- Управление FPS ---
    clock.tick(FPS)

# --- Сохранение рекорда в файл ---
with open("highscore.txt", "w") as f:
    f.write(str(high_score))

# --- Выход из Pygame ---
pygame.quit()
sys.exit()
